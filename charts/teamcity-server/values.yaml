image:
  repository: jetbrains/teamcity-server
  tag: latest
  pullPolicy: Always
  imagePullSecrets: []

proxy:
  replicas: 1 #2
  image:
    repository: haproxy
    tag: "2.8"
    pullPolicy: IfNotPresent
    imagePullSecrets: []
  resources:
    requests:
      cpu: "10m"
      memory: "12Mi"
  startupProbe:
    httpGet:
      path: /login.html
      port: http
      scheme: HTTP
    failureThreshold: 120
    periodSeconds: 5
  livenessProbe: ~
  ingress:
    hosts:
      - teamcity.local
      - teamcity.isolated.local
    ingressClassName: nginx
    annotations: ~
      # cert-manager.io/cluster-issuer: letsencrypt
      # Nginx specific annotations
      # nginx.ingress.kubernetes.io/client-body-buffer-size: 1M
      # nginx.ingress.kubernetes.io/proxy-body-size: 400M
      # nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
      # nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
      # nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"

  affinity: {}
  tolerations:
    - key: "{{ $.Release.Name }}-proxy"
      operator: Exists
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: "{{ $.Release.Name }}-proxy"
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: "{{ $.Release.Name }}-proxy"

## Teamcity deployed by StateFulSet
## @param teamcity.resources default value for all nodes in sts
teamcity:
  resources:
    requests: {}
      # cpu: 100m
      # memory: 2048Mi
    limits:
      cpu: 100m
      memory: 1024Mi #2048Mi
  ## @param teamcity.env default values for all nodes in sts
  env:
    TEAMCITY_SERVER_MEM_OPTS: -Xms512m -Xmx2048m
    POD_NAME:
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  startupProbe: ~
  livenessProbe:
    httpGet:
      path: /healthCheck/healthy
      port: http
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /healthCheck/ready
      port: http
      scheme: HTTP
    failureThreshold: 2
    periodSeconds: 10
  ports:
  - containerPort: 8111
    name: http
    protocol: TCP
  affinity: {}
  tolerations:
    - key: "{{ $.Release.Name }}"
      operator: Exists
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: "{{ $.Release.Name }}"
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: "{{ $.Release.Name }}"
  ## @param teamcity.nodes[<index>] override per <index> of sts node
  nodes:
  ## @param teamcity.nodes[<index>].ingress.host passed to ingress/tls if not empty
  - ingress:
      host: teamcity-main.example.com
    ## @param temacity.nodes[<index>].env used to override env per node
    # env:
    #   ROOT_URL: "http://{{ $.Release.Name }}-{{ $index }}.{{ $.Release.Name }}-headless.{{ $.Release.Namespace}}:8111"
    #   NODE_ID: "{{ $.Release.Name }}-{{ $index }}"
    responsibilities:
    - MAIN_NODE
    - CAN_PROCESS_BUILD_TRIGGERS
    - CAN_PROCESS_USER_DATA_MODIFICATION_REQUESTS
    - CAN_CHECK_FOR_CHANGES
    - CAN_PROCESS_BUILD_MESSAGES
  - responsibilities:
    - CAN_PROCESS_BUILD_TRIGGERS
    - CAN_PROCESS_USER_DATA_MODIFICATION_REQUESTS
    - CAN_CHECK_FOR_CHANGES
    - CAN_PROCESS_BUILD_MESSAGES

serviceAccount:
  enabled: false
  annotations: {}
  agentRBAC:
      enabled: false

pdb:
  enabled: true
  minAvailable: 1

pvc:
  name: teamcity-server-data
  annotations:
    helm.sh/resource-policy: keep
  storageClassName: efs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 4Gi #16Gi

## Create & Mount PVC for /opt/teamcity directories
## Defaults to emptyDir
## Generated by STS PVC Template - volume per node
ephemeral:
  temp:
    enabled: false
    annotations: {}
    storageClassName: efs
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi
  logs:
    enabled: false
    annotations: {}
    storageClassName: efs
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi
  cache:
    enabled: false
    annotations: {}
    storageClassName: efs
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi

database:
  host: "127.0.0.1"
  name: "teamcity"
  user: "teamcity"
  password: "password"

configMap:
  datadirConfig:
    database.properties: |
      connectionUrl=jdbc:mysql://{{ $.Values.database.host }}/{{ .Values.database.name}}?allowPublicKeyRetrieval=true&useSSL=false
      connectionProperties.user={{ $.Values.database.user }}
      connectionProperties.password={{ $.Values.database.password }}
      maxConnections=50
  optConf: ~
    # server.xml: |-
  services:
    fastunzip.sh: |
      #!/bin/bash
      cd /opt/teamcity/webapps/ROOT/WEB-INF/plugins
      for zip in ./*.zip; do
        test -f $zip || continue
        unzip $zip -d $(basename $zip .zip) > /dev/null && rm -f $zip &
      done
      wait
